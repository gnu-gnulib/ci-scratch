#! /bin/sh
. "${srcdir=.}/init.sh"; path_prepend_ . ../src

# Test checking of D format strings.

cat <<\EOF > f-d-2.data
# Valid: %% doesn't count
msgid  "abc%%def"
msgstr "xyz"
# Invalid: invalid msgstr
msgid  "abc%%def"
msgstr "xyz%"
# Valid: same arguments
msgid  "abc%s%gdef"
msgstr "xyz%s%g"
# Valid: same arguments, with different widths
msgid  "abc%2sdef"
msgstr "xyz%3s"
# Valid: same arguments but in numbered syntax
msgid  "abc%s%gdef"
msgstr "xyz%1$s%2$g"
# Valid: permutation
msgid  "abc%s%g%cdef"
msgstr "xyz%3$c%2$g%1$s"
# Invalid: too few arguments
msgid  "abc%2$udef%1$s"
msgstr "xyz%1$s"
# Invalid: too few arguments
msgid  "abc%sdef%u"
msgstr "xyz%s"
# Invalid: too many arguments
msgid  "abc%udef"
msgstr "xyz%uvw%c"
# Valid: same numbered arguments, with different widths
msgid  "abc%2$5s%1$4s"
msgstr "xyz%2$4s%1$5s"
# Invalid: missing final argument
msgid  "abc%2$sdef%1$u"
msgstr "xyz%1$u"
# Valid: missing non-final argument
msgid  "abc%1$sdef%2$u"
msgstr "xyz%2$u"
# Invalid: added argument at the end
msgid  "abc%1$udef"
msgstr "xyz%1$uvw%2$c"
# Invalid: added argument not at the end (see the comment in format-d.c:format_check))
msgid  "abc%2$udef"
msgstr "xyz%2$uvw%1$c"

# Valid: type compatibility
msgid  "abc%d"
msgstr "xyz%u"
# Valid: type compatibility
msgid  "abc%u"
msgstr "xyz%b"
# Valid: type compatibility
msgid  "abc%u"
msgstr "xyz%o"

# Valid: type compatibility
msgid  "abc%x"
msgstr "xyz%X"

# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%E"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%f"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%F"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%g"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%G"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%a"
# Valid: type compatibility
msgid  "abc%e"
msgstr "xyz%A"

# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%c"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%d"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%x"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%e"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%r"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%s"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%d"
# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%x"
# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%e"
# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%r"
# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%c"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%d"
msgstr "xyz%x"
# Invalid: type incompatibility
msgid  "abc%d"
msgstr "xyz%e"
# Invalid: type incompatibility
msgid  "abc%d"
msgstr "xyz%r"
# Invalid: type incompatibility
msgid  "abc%d"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%d"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%x"
msgstr "xyz%e"
# Invalid: type incompatibility
msgid  "abc%x"
msgstr "xyz%r"
# Invalid: type incompatibility
msgid  "abc%x"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%x"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%e"
msgstr "xyz%r"
# Invalid: type incompatibility
msgid  "abc%e"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%e"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%r"
msgstr "xyz%(%s%)"
# Invalid: type incompatibility
msgid  "abc%r"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility
msgid  "abc%(%s%)"
msgstr "xyz%(%s%s%)"

# Invalid: type incompatibility for width
msgid  "abc%g%*g"
msgstr "xyz%*g%g"

# Invalid: type incompatibility for precision
msgid  "abc%g%.*g"
msgstr "xyz%.*g%g"

# Invalid: type incompatibility for separator digits
msgid  "abc%g%,*g"
msgstr "xyz%,*g%g"

# Invalid: type incompatibility for separator character
msgid  "abc%,*g%,*?g"
msgstr "xyz%,*?g%,*g"
EOF

: ${MSGFMT=msgfmt}
n=0
while read comment; do
  if test -z "$comment"; then
    read comment
  fi
  read msgid_line
  read msgstr_line
  n=`expr $n + 1`
  cat <<EOF > f-d-2-$n.po
#, d-format
${msgid_line}
${msgstr_line}
EOF
  fail=
  if echo "$comment" | grep 'Valid:' > /dev/null; then
    if ${MSGFMT} --check-format -o f-d-2-$n.mo f-d-2-$n.po; then
      :
    else
      fail=yes
    fi
  else
    ${MSGFMT} --check-format -o f-d-2-$n.mo f-d-2-$n.po 2> /dev/null
    if test $? = 1; then
      :
    else
      fail=yes
    fi
  fi
  if test -n "$fail"; then
    echo "Format string checking error:" 1>&2
    cat f-d-2-$n.po 1>&2
    Exit 1
  fi
  rm -f f-d-2-$n.po f-d-2-$n.mo
done < f-d-2.data

Exit 0
